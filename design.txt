最开始的设计是有问题的,数据接受模块和交易模块和其他的模块，比如策略，订单管理，ui等是对等的
只不过数据和交易主要是pub，同时也接受 命令

但是考虑到不同的模块的处理速度和延迟不一样，这么做可能不合适

data     trader
 |          |
 |          |
 pub        pub
 |          |
 ----xpub---
 zmq_proxy
 ----xsub----
 |          |
 |          |
 sub        sub


 ---------------
 应该给data和和trader单独开4个通道
 2个pub和两个sub，或者req/..
 然后在reactor中集中的pub


 data     trader
 |          |
 |          |
 pub        pub
 |          |
 ----reactor---
        |
        |
 ----pub----
 |          |
 |          |
 sub        sub
---
这种架构可以保证自己控制数据和交易的实时性，保证交易和数据的前提下再满足外部模块的订阅需求






--------
整个系统如果都是通过消息来驱动,就可以轻松的解耦

可以方便把数据暴露给新增模块的同时,我们自己整个系统的实现也可以通过这个机制来做
比如订单管理如果继续消息管理而不是回调的方式,依赖关系的解决就可以简单很多
不需要复杂的代码级别的设计

zmq的安装 
apt-get install libzmq3-dev



git clone git://github.com/zeromq/libzmq.git 
cd libzmq
./autogen.sh
./configure -with-libsodium && make 
sudo make install 
sudo ldconfig
cd ../



git clone https://github.com/zeromq/zmqpp.git
mkdir build
cd build 
cmake ..
make 
sudo make install

----
# 安装必备的包
$ sudo apt-get install libtool pkg-config build-essential autoconf automake
$ git clone https://github.com/zeromq/libzmq.git
$ mkdir build
$ cd build
$ cmake ..
$ sudo make -j4 install

# 安装libzmq的C++绑定

https://github.com/zeromq/zmqpp.git
#//$ git clone git@github.com:zeromq/cppzmq.git
$ mkdir build
$ cd build
$ cmake ..
$ sudo make -j4 install